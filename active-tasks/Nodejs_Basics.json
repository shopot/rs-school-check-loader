{
  "taskName": "Node.js Basics",
  "github": "https://github.com/AlreadyBored/nodejs-assignments/blob/main/assignments/nodejs-basics/assignment.md",
  "information": "The maximum number of points is 206. Cross-check criteria:",
  "criteria": [
    {
      "type": "title",
      "title": "For check simplification you have npm-scripts in package.json.<br>NB! Some scripts have predefined data (e.g. environment variables, CLI arguments). Feel free to change it during the check if necessary."
    },
    {
      "type": "title",
      "title": "Basic Scope"
    },
    {
      "type": "title",
      "title": "File system (src/fs) (max 44 points)"
    },
    {
      "type": "subtask",
      "text": "create.js - implement function that creates new file fresh.txt with content I am fresh and young inside of the files folder (if file already exists Error with message FS operation failed must be thrown)",
      "max": 6
    },
    {
      "type": "subtask",
      "text": "copy.js - implement function that copies folder files files with all its content into folder files_copy at the same level (if files folder doesn't exists or files_copy has already been created Error with message FS operation failed must be thrown)",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "rename.js - implement function that renames file wrongFilename.txt to properFilename with extension .md (if there's no file wrongFilename.txt or properFilename.md already exists Error with message FS operation failed must be thrown)",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "delete.js - implement function that deletes file fileToRemove.txt (if there's no file fileToRemove.txt Error with message FS operation failed must be thrown)",
      "max": 6
    },
    {
      "type": "subtask",
      "text": "list.js - implement function that prints all array of filenames from files folder into console (if files folder doesn't exists Error with message FS operation failed must be thrown)",
      "max": 6
    },
    {
      "type": "subtask",
      "text": "read.js - implement function that prints content of the fileToRead.txt into console (if there's no file fileToRead.txt Error with message FS operation failed must be thrown)",
      "max": 6
    },
    {
      "type": "title",
      "title": "Command line interface (src/cli) (max 12 points)"
    },
    {
      "type": "subtask",
      "text": "env.js -  implement function that parses environment variables with prefix RSS_ and prints them to the console in the format RSS_name1=value1; RSS_name2=value2",
      "max": 6
    },
    {
      "type": "subtask",
      "text": "args.js - implement function that parses command line arguments (given in format --propName value --prop2Name value2, you don't need to validate it) and prints them to the console in the format propName is value, prop2Name is value2",
      "max": 6
    },
    {
      "type": "title",
      "title": "Modules(src/modules) (max 20 points)"
    },
    {
      "type": "subtask",
      "text": "cjsToEsm.cjs - refactored properly, rewrite it to it's equivalent in ECMAScript notation (and rename it to esm.mjs)",
      "max": 20
    },
    {
      "type": "title",
      "title": "Hash (src/hash) (max 10 points)"
    },
    {
      "type": "subtask",
      "text": "calcHash.js - implement function that calculates SHA256 hash for file fileToCalculateHashFor.txt and logs it into console as hex",
      "max": 10
    },
    {
      "type": "title",
      "title": "Streams (src/streams) (max 30 points)"
    },
    {
      "type": "subtask",
      "text": "read.js - implement function that reads file fileToRead.txt content using Readable Stream and prints it's content into process.stdout",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "write.js - implement function that writes process.stdin data into file fileToWrite.txt content using Writable Stream",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "transform.js - implement function that reads data from process.stdin, reverses text using Transform Stream and then writes it into process.stdout",
      "max": 10
    },
    {
      "type": "title",
      "title": "Zlib (src/zip) (max 20 points)"
    },
    {
      "type": "subtask",
      "text": "compress.js - implement function that compresses file fileToCompress.txt to archive.gz using zlib and Streams API",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "decompress.js - implement function that decompresses archive.gz back to the fileToCompress.txt with same content as before compression using zlib and Streams API",
      "max": 10
    },
    {
      "type": "title",
      "title": "Advanced Scope"
    },
    {
      "type": "title",
      "title": "Worker Threads (src/wt) (max 40 points)"
    },
    {
      "type": "subtask",
      "text": "worker.js - extend given function to work with data received from main thread and implement function which sends result of the computation to the main thread",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "main.js - implement function that creates number of worker threads (equal to the number of host machine logical CPU cores) from file worker.js and able to send data to those threads and to receive result of the computation from them. You should send incremental number starting from 10 to each worker. For example: on host machine with 4 cores you should create 4 workers and send 10 to first worker, 11 to second worker, 12 to third worker, 13 to fourth worker. After all workers will finish, function should log array of results into console. <br> The results are array of objects with 2 properties:<br> status - 'resolved' in case of successfully received value from worker or 'error' in case of error in worker <br>data - value from worker in case of success or null in case of error in worker <br>The results in the array must be in the same order that the workers were created",
      "max": 30
    },
    {
      "type": "title",
      "title": "Child Processes (src/cp) (max 30 points)"
    },
    {
      "type": "subtask",
      "text": "spawns child process",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "child process stdin receives input from master process stdin",
      "max": 10
    },
    {
      "type": "subtask",
      "text": "child process stdout sends data to master process stdout",
      "max": 10
    },
    {
      "type": "penalty",
      "text": "<b>-95% of total task score</b>: package.json have any external tools/libraries as dependencies. Any external tools/libraries are used",
      "max": 0
    },
    {
      "type": "penalty",
      "text": "<b>-30% of total task score</b>: Commits after deadline (except commits that affect only Readme.md, .gitignore, etc.)",
      "max": 0
    }
  ]
}